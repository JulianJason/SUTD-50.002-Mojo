/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module aluUnit_1 (
    input clk,
    input [5:0] alufn,
    input [7:0] a,
    input [7:0] b,
    output reg [7:0] result
  );
  
  
  
  
  wire [8-1:0] M_adder_added;
  wire [1-1:0] M_adder_z;
  wire [1-1:0] M_adder_v;
  wire [1-1:0] M_adder_n;
  reg [6-1:0] M_adder_alufn;
  reg [8-1:0] M_adder_a;
  reg [8-1:0] M_adder_b;
  adderUnit_4 adder (
    .alufn(M_adder_alufn),
    .a(M_adder_a),
    .b(M_adder_b),
    .added(M_adder_added),
    .z(M_adder_z),
    .v(M_adder_v),
    .n(M_adder_n)
  );
  
  wire [8-1:0] M_shifter_shifted;
  reg [6-1:0] M_shifter_alufn;
  reg [8-1:0] M_shifter_a;
  reg [3-1:0] M_shifter_b;
  shifterUnit_5 shifter (
    .alufn(M_shifter_alufn),
    .a(M_shifter_a),
    .b(M_shifter_b),
    .shifted(M_shifter_shifted)
  );
  
  wire [8-1:0] M_boolean_booleaned;
  reg [6-1:0] M_boolean_alufn;
  reg [8-1:0] M_boolean_a;
  reg [8-1:0] M_boolean_b;
  booleanUnit_6 boolean (
    .alufn(M_boolean_alufn),
    .a(M_boolean_a),
    .b(M_boolean_b),
    .booleaned(M_boolean_booleaned)
  );
  
  wire [1-1:0] M_comparator_compared;
  reg [6-1:0] M_comparator_alufn;
  reg [1-1:0] M_comparator_z;
  reg [1-1:0] M_comparator_v;
  reg [1-1:0] M_comparator_n;
  comparatorUnit_7 comparator (
    .alufn(M_comparator_alufn),
    .z(M_comparator_z),
    .v(M_comparator_v),
    .n(M_comparator_n),
    .compared(M_comparator_compared)
  );
  
  always @* begin
    M_adder_a = a;
    M_adder_b = b;
    M_adder_alufn = alufn;
    M_shifter_a = a;
    M_shifter_b = b[0+2-:3];
    M_shifter_alufn = alufn;
    M_boolean_a = a;
    M_boolean_b = b;
    M_boolean_alufn = alufn;
    M_comparator_alufn = alufn;
    M_comparator_v = M_adder_v;
    M_comparator_n = M_adder_n;
    M_comparator_z = M_adder_z;
    
    case (alufn[4+1-:2])
      2'h0: begin
        result = M_adder_added;
      end
      2'h1: begin
        result = M_boolean_booleaned;
      end
      2'h2: begin
        result = M_shifter_shifted;
      end
      2'h3: begin
        result = M_comparator_compared;
      end
      default: begin
        result = 8'h00;
      end
    endcase
  end
endmodule
