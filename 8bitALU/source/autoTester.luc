module autoTester (
    input clk,  // clock
    input rst,  // reset
    input io_button[5],
    input alu_result[11],
    output testingState,
    output mockA[8],
    output mockB[8],
    output alufn[6],
    output expectedOut[11],
    output testResult[2]
  ) {
  sig expectedResult[11];
  .clk(clk) {
    .rst(rst) {
      fsm state = {NOT_TESTING, ADD, SUB, MUL, DIV, MOD,  AND, OR, XOR, INV, SHL, SHR, SRA, SLA, EQ, LT, LTE, GT, GTE, END, ERROR}; // the multiple testing states
    }
    dff count[25];  // delay counter
    dff testing[1]; // testing state storage
  }
  always {
    // default values to show nothing
    testResult = 2b00;
    mockA = 8bxx;
    mockB = 8bxx;
    alufn = 6bxx;
    expectedResult = 11bx;
    
    if (count.q == 0) {
      case (state.q) {
        state.NOT_TESTING:
          state.d = state.q;
          count.d = 0;
          testing.d = 0;
        state.END:
          state.d = state.q;
          count.d = 0;
          testing.d = 0;
        state.ERROR:
          state.d = state.q;
          count.d = 0;
        default: state.d = state.q + 1;
      }
    }
    
    case (state.q) {
      state.ADD:
        mockA = 5;
        mockB = 11;
        alufn = 6b000000;
        expectedResult = 16;
      state.SUB:
        mockA = 26;
        mockB = 11;
        alufn = 6b000001;
        expectedResult = 15;
      state.MUL:
        mockA = 12;
        mockB = 10;
        alufn = 6b000010;
        expectedResult = 120;
      state.DIV:
        mockA = 120;
        mockB = 5;
        alufn = 6b000011;
        expectedResult = 24; 
      state.MOD:
        mockA = 131;
        mockB = 3;
        alufn = 6b000100;
        expectedResult = 2;
      state.AND:
        mockA = 8b11010010;
        mockB = 8b11010010;
        alufn = 6b011000;
        expectedResult = 8b11010010;
      state.OR:
        mockA = 8b11110010;
        mockB = 8b00001101;
        alufn = 6b011110;
        expectedResult = 8b11111111;
      state.XOR:
        mockA = 8b11010010;
        mockB = 8b01010011;
        alufn = 6b010110;
        expectedResult = 8b10000001;
      state.INV:
        mockA = 8b01001001;
        mockB = 8b00000000;
        alufn = 6b010111;
        expectedResult = 8b10110110;
      state.SHL:
        mockA = 8b01001001;
        mockB = 2;
        alufn = 6b100000;
        expectedResult = 8b00100100;
      state.SHR:
        mockA = 8b1101001;
        mockB = 1;
        alufn = 6b100001;
        expectedResult = 8b01101001;
      state.SLA:
        mockA = 8b01001000;
        mockB = 3;
        alufn = 6b100010;
        expectedResult = 8b01001000;
      state.SRA:
        mockA = 8b11100100;
        mockB = 4;
        alufn = 6b100011;
        expectedResult = 8b11111110;
      state.EQ:
        mockA = 24;
        mockB = 24;
        alufn = 6b110011;
        expectedResult = 1;
      state.LT:
        mockA = 50;
        mockB = 51;
        alufn = 6b110101;
        expectedResult = 1;
      state.LTE:
        mockA = 32;
        mockB = 33;
        alufn = 6b110111;
        expectedResult = 0;
      state.GT:
        mockA = 11;
        mockB = 5;
        alufn = 6b111001;
        expectedResult = 1;
      state.GTE:
        mockA = 11;
        mockB = 12;
        alufn = 6b111011;
        expectedResult = 0;
      state.END:
        testing.d = 0;
        testResult = 2b11;
      state.ERROR:
        testing.d = 1;
        testResult = 2b01;
      default:
        expectedResult = 11bx; // redundant, but need to put something here
    }
    /*
    if (alu_result[7:0] != expectedResult[7:0] && testing.q == 1) { /// TODO should not do this
      state.d = state.ERROR;
    }
    */
    expectedOut = expectedResult;
    if (io_button[1]) {
      state.d = 1;
      testing.d = 1;
    }
    
    count.d = count.q + 1; // count up for each clock cycle, automatically cycles to 0 if overflow
    testingState = testing.q; // outputs testingstate for mojo_top 
  }
}