/*
  handle overflows = output 9 digit long
  auto test cases
*/

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    output spi_miso,        // AVR SPI MISO
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    output avr_rx,          // AVR RX (FPGA TX)
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  sig a[8];
  sig b[8];
  sig alufn[6];
  sig testing;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    aluUnit alu;
    reset_conditioner reset_cond;
    .rst(rst) {
      multi_LED_digit multi_led;        // multi led decoder to determine led digits
      autoTester autotester;
    }
  }
  
  always {
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    io_led = 3x{{8h00}};    // turn LEDs off
    io_seg = 8hff;          // turn segments off
    io_sel = 4hf;           // select no digits
    testing = autotester.testingState;
    
    autotester.io_button = io_button;
    autotester.alu_result = 0;
    // if currently testing, set led display to testing configuration
    if (testing) {
      alu.a = autotester.mockA;
      alu.b = autotester.mockB;
      alu.alufn = autotester.alufn;
      autotester.alu_result = alu.result;
      
      multi_led.a = autotester.mockA;
      multi_led.b = autotester.mockB;
      
      
      io_led[2] = autotester.mockA;
      io_led[1] = autotester.mockB;
      io_led[0][7:2] = autotester.alufn;
      io_led[0][1:0] = autotester.testResult;
    } else {
      
      // connect a, b, alufn to dip switches.
      a = io_dip[2];          // left most array dip switch
      b = io_dip[1];          // middle array dip switch
      alufn = io_dip[0][7:2]; // right array dip switch
      
      // pipe a, b, alufn values to ALU
      alu.a = a;
      alu.b = b;
      alu.alufn = alufn;
      
      // pipe a, b and ALU result to led component. Hook up the buttons
      multi_led.a = a;
      multi_led.b = b;    
      
      io_led = io_dip;         // connect led to dip switches
      io_led[0][1:0] = 0;      // turn off unused LED
    }

    
    multi_led.value = alu.result;
    multi_led.button = io_button;
    io_seg = ~multi_led.seg; // connect segments to the driver
    io_sel = ~multi_led.sel; // connect digit select to the driver
    
    // debug tools
    // io_led[0] = [7:0]
    // io_led[1] = [10:8]    
     
  }
}