/*
   This file was generated automatically by the Mojo IDE version B1.3.4.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module mojo_top_0 (
    input clk,
    input rst_n,
    input cclk,
    output reg spi_miso,
    input spi_ss,
    input spi_mosi,
    input spi_sck,
    output reg [3:0] spi_channel,
    input avr_tx,
    output reg avr_rx,
    input avr_rx_busy,
    output reg [23:0] io_led,
    output reg [7:0] io_seg,
    output reg [3:0] io_sel,
    input [4:0] io_button,
    input [23:0] io_dip,
    input from_adder_cout,
    input from_adder_s
  );
  
  
  
  reg rst;
  
  wire [1-1:0] M_reset_cond_out;
  reg [1-1:0] M_reset_cond_in;
  reset_conditioner_1 reset_cond (
    .clk(clk),
    .in(M_reset_cond_in),
    .out(M_reset_cond_out)
  );
  wire [1-1:0] M_s_conditioner_out;
  reg [1-1:0] M_s_conditioner_in;
  button_conditioner_2 s_conditioner (
    .clk(clk),
    .in(M_s_conditioner_in),
    .out(M_s_conditioner_out)
  );
  wire [1-1:0] M_cout_conditioner_out;
  reg [1-1:0] M_cout_conditioner_in;
  button_conditioner_2 cout_conditioner (
    .clk(clk),
    .in(M_cout_conditioner_in),
    .out(M_cout_conditioner_out)
  );
  wire [1-1:0] M_s_edge_out;
  reg [1-1:0] M_s_edge_in;
  edge_detector_4 s_edge (
    .clk(clk),
    .in(M_s_edge_in),
    .out(M_s_edge_out)
  );
  wire [1-1:0] M_cout_edge_out;
  reg [1-1:0] M_cout_edge_in;
  edge_detector_4 cout_edge (
    .clk(clk),
    .in(M_cout_edge_in),
    .out(M_cout_edge_out)
  );
  wire [7-1:0] M_multi_led_seg;
  wire [4-1:0] M_multi_led_sel;
  wire [8-1:0] M_multi_led_matching_led;
  reg [1-1:0] M_multi_led_expectedC;
  reg [1-1:0] M_multi_led_expectedS;
  reg [1-1:0] M_multi_led_outC;
  reg [1-1:0] M_multi_led_outS;
  multi_LED_digit_6 multi_led (
    .clk(clk),
    .rst(rst),
    .expectedC(M_multi_led_expectedC),
    .expectedS(M_multi_led_expectedS),
    .outC(M_multi_led_outC),
    .outS(M_multi_led_outS),
    .seg(M_multi_led_seg),
    .sel(M_multi_led_sel),
    .matching_led(M_multi_led_matching_led)
  );
  wire [1-1:0] M_logic_expectedS;
  wire [1-1:0] M_logic_expectedC;
  reg [24-1:0] M_logic_io_dip;
  logic_7 logic (
    .clk(clk),
    .rst(rst),
    .io_dip(M_logic_io_dip),
    .expectedS(M_logic_expectedS),
    .expectedC(M_logic_expectedC)
  );
  wire [1-1:0] M_ctr_value;
  counter_8 ctr (
    .clk(clk),
    .rst(rst),
    .value(M_ctr_value)
  );
  wire [1-1:0] M_avr_spi_miso;
  wire [4-1:0] M_avr_spi_channel;
  wire [1-1:0] M_avr_tx;
  wire [1-1:0] M_avr_new_sample;
  wire [10-1:0] M_avr_sample;
  wire [4-1:0] M_avr_sample_channel;
  wire [1-1:0] M_avr_tx_busy;
  wire [8-1:0] M_avr_rx_data;
  wire [1-1:0] M_avr_new_rx_data;
  reg [1-1:0] M_avr_cclk;
  reg [1-1:0] M_avr_spi_mosi;
  reg [1-1:0] M_avr_spi_sck;
  reg [1-1:0] M_avr_spi_ss;
  reg [1-1:0] M_avr_rx;
  reg [4-1:0] M_avr_channel;
  reg [8-1:0] M_avr_tx_data;
  reg [1-1:0] M_avr_new_tx_data;
  reg [1-1:0] M_avr_tx_block;
  avr_interface_9 avr (
    .clk(clk),
    .rst(rst),
    .cclk(M_avr_cclk),
    .spi_mosi(M_avr_spi_mosi),
    .spi_sck(M_avr_spi_sck),
    .spi_ss(M_avr_spi_ss),
    .rx(M_avr_rx),
    .channel(M_avr_channel),
    .tx_data(M_avr_tx_data),
    .new_tx_data(M_avr_new_tx_data),
    .tx_block(M_avr_tx_block),
    .spi_miso(M_avr_spi_miso),
    .spi_channel(M_avr_spi_channel),
    .tx(M_avr_tx),
    .new_sample(M_avr_new_sample),
    .sample(M_avr_sample),
    .sample_channel(M_avr_sample_channel),
    .tx_busy(M_avr_tx_busy),
    .rx_data(M_avr_rx_data),
    .new_rx_data(M_avr_new_rx_data)
  );
  wire [4-1:0] M_detector_channel;
  reg [24-1:0] M_detector_io_dip;
  reg [10-1:0] M_detector_sample;
  reg [4-1:0] M_detector_sample_channel;
  reg [1-1:0] M_detector_new_sample;
  avr_detector_10 detector (
    .clk(clk),
    .rst(rst),
    .io_dip(M_detector_io_dip),
    .sample(M_detector_sample),
    .sample_channel(M_detector_sample_channel),
    .new_sample(M_detector_new_sample),
    .channel(M_detector_channel)
  );
  wire [8-1:0] M_autoTester_io_led;
  wire [8-1:0] M_autoTester_matching_led;
  wire [1-1:0] M_autoTester_testingState;
  wire [1-1:0] M_autoTester_expectedS;
  wire [1-1:0] M_autoTester_expectedC;
  wire [1-1:0] M_autoTester_to_adder_a;
  wire [1-1:0] M_autoTester_to_adder_b;
  wire [1-1:0] M_autoTester_to_adder_cin;
  reg [1-1:0] M_autoTester_outC;
  reg [1-1:0] M_autoTester_outS;
  reg [5-1:0] M_autoTester_io_button;
  fsm_tester_11 autoTester (
    .clk(clk),
    .rst(rst),
    .outC(M_autoTester_outC),
    .outS(M_autoTester_outS),
    .io_button(M_autoTester_io_button),
    .io_led(M_autoTester_io_led),
    .matching_led(M_autoTester_matching_led),
    .testingState(M_autoTester_testingState),
    .expectedS(M_autoTester_expectedS),
    .expectedC(M_autoTester_expectedC),
    .to_adder_a(M_autoTester_to_adder_a),
    .to_adder_b(M_autoTester_to_adder_b),
    .to_adder_cin(M_autoTester_to_adder_cin)
  );
  
  reg testing;
  
  always @* begin
    M_reset_cond_in = ~rst_n;
    rst = M_reset_cond_out;
    M_avr_cclk = cclk;
    M_avr_spi_ss = spi_ss;
    M_avr_spi_mosi = spi_mosi;
    M_avr_spi_sck = spi_sck;
    M_avr_rx = avr_tx;
    M_avr_tx_block = avr_rx_busy;
    spi_miso = M_avr_spi_miso;
    spi_channel = M_avr_spi_channel;
    avr_rx = M_avr_tx;
    M_avr_new_tx_data = 1'h0;
    M_avr_tx_data = 8'bxxxxxxxx;
    M_avr_channel = M_detector_channel;
    M_detector_sample = M_avr_sample;
    M_detector_sample_channel = M_avr_sample_channel;
    M_detector_new_sample = M_avr_new_sample;
    M_autoTester_io_button = io_button;
    M_logic_io_dip = io_dip;
    M_detector_io_dip = io_dip;
    M_s_conditioner_in = from_adder_s;
    M_cout_conditioner_in = from_adder_cout;
    M_s_edge_in = M_s_conditioner_out;
    M_cout_edge_in = M_cout_conditioner_out;
    M_autoTester_outC = M_cout_edge_out;
    M_autoTester_outS = M_s_edge_out;
    M_multi_led_outC = M_cout_edge_out;
    M_multi_led_outS = M_s_edge_out;
    testing = M_autoTester_testingState;
    if (testing) begin
      M_multi_led_expectedC = M_autoTester_expectedC;
      M_multi_led_expectedS = M_autoTester_expectedS;
      io_led[8+7-:8] = M_autoTester_matching_led;
    end else begin
      M_multi_led_expectedC = M_logic_expectedC;
      M_multi_led_expectedS = M_logic_expectedS;
      io_led[8+7-:8] = M_multi_led_matching_led;
    end
    io_seg = ~M_multi_led_seg;
    io_sel = ~M_multi_led_sel;
    io_led[16+7-:8] = M_autoTester_io_led;
    io_led[0+7-:8] = io_dip[0+7-:8];
  end
endmodule
