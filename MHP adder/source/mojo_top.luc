module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    output io_led [3][8],   // LEDs on IO Shield
    output io_seg [8],      // 7-segment LEDs on IO Shield
    output io_sel [4],      // Digit select on IO Shield
    input io_button [5],    // 5 buttons on IO Shield
    input io_dip [3][8]     // DIP switches on IO Shield
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    
    .rst(rst) {
      multi_LED_digit multi_led;        // multi led decoder to determine led digits
      logic logic;                      // full adder logic
      counter ctr (#SIZE(1), #DIV(24)); // creats a counter of size 1
    }
  }
  
  always {
    reset_cond.in = ~rst_n;   // input raw inverted reset signal
    rst = reset_cond.out;     // conditioned reset
    
    spi_miso = bz;            // not using SPI
    spi_channel = bzzzz;      // not using flags
    avr_rx = bz;              // not using serial port
   
    logic.io_dip = io_dip;    // takes in the switch state and processes in the full adder
    multi_led.outC = logic.outC;  // pipes the FA output Carry in to the multi_led
    multi_led.outS = logic.outS;  // pipes the FA output Sum to the multi_led
    
    
    io_seg = ~multi_led.seg; // connect segments to the driver
    io_sel = ~multi_led.sel; // connect digit select to the driver
    
    io_led = io_dip;   // connect the DIP switches to the LEDs
  }    
}