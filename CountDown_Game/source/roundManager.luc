module roundManager (
    input clk,  // clock
    input rst,  // reset
    input redDigit[16],
    input redOperator[6],
    input redInputFlag,
    input blueDigit[16],
    input blueOperator[6],
    input blueInputFlag,
    input difficulty[4],
    input newGameFlag,
    output redOut[8],
    output blueOut[8],
    output choice1[4],
    output choice2[4],
    output choice3[4],
    output choice4[4],
    output redResetFlag,
    output blueResetFlag,
    output destinationValue[16]
  ) {
.  clk(clk) {
    .rst(rst) {
      random_number_generator rng;
    }
    dff count[25];  // delay counter
    dff seed[25];
    aluUnit alu;
    dff redValue[8];
    dff blueValue[8];
    dff getNewNum;
  }
  sig result[10];
  sig temp[10];
  always {
    redValue.d = redValue.q;
    blueValue.d = blueValue.q;
    getNewNum.d = getNewNum.q;
    seed.d = seed.q;
    alu.a = 0;
    alu.b = 0;
    alu.alufn = 6b000000;
    redResetFlag = 0;
    blueResetFlag = 0;
    
    if (redInputFlag) {
      temp = redValue.q;
      case (redOperator && redDigit != 0 && redOperator != 0) {
        1: temp = temp + redDigit;
        2: temp = temp- redDigit;
        3: temp = temp * redDigit;
        4: temp = temp / redDigit;
        default: temp = temp;
      }
      redValue.d = temp;
      redResetFlag = 1;
    }
    
    if (blueInputFlag && blueDigit != 0 && blueOperator != 0) {
      temp = blueValue.q;
      case (blueOperator) {
        1: temp = temp + blueDigit;
        2: temp = temp- blueDigit;
        3: temp = temp * blueDigit;
        4: temp = temp / blueDigit;
        default: temp = temp;
      }
      blueValue.d = temp;
      blueResetFlag = 1;
    }
    
    rng.next = 0;
    rng.seed = 76545674;
    
    choice1 = rng.num1;
    choice2 = rng.num2;
    choice3 = rng.num3;
    choice4 = rng.num4;
      result = rng.num1;
      case (rng.operator1) {
        0: result = result + rng.num2;
        1: result = result - rng.num2;
        2: result = result * rng.num2;
        3: result = result / rng.num2;
        default: result = result;
      }
      case (rng.operator2) {
        0: result = result + rng.num3;
        1: result = result - rng.num3;
        2: result = result * rng.num3;
        3: result = result / rng.num3;
        default: result = result;
      }
      case (rng.operator3) {
        0: result = result + rng.num4;
        1: result = result - rng.num4;
        2: result = result * rng.num4;
        3: result = result / rng.num4;
        default: result = result;
    }
      
      if (result > 100) {
        rng.next = 1;
        getNewNum.d = 1;
      } else {
        rng.next = 0;
        getNewNum.d = 0;
      }
   
    
    
    redOut = redValue.q;
    blueOut = blueValue.q;
    
    count.d = count.q + 1;
    destinationValue = result; 
    
    if (newGameFlag) {
      redValue.d = 0;
      blueValue.d = 0;
      rng.next = 1;
      seed.d = count.q;
    }
  }
}
