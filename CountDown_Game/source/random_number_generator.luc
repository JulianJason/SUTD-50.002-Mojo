/******************************************************************************

   The MIT License (MIT)

   Copyright (c) 2015 Embedded Micro

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in
   all copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
   THE SOFTWARE.

   *****************************************************************************

   Pseudo-random Number Generator: This module generates pseudo-random 32bit 
   numbers based on Xorshift (https://en.wikipedia.org/wiki/Xorshift). The
   numbers shouldn't be used for crypto applications, but should be fine for
   most applications where numbers need to just appear to be random.
   
   The output, num, is updated when next is high. Next can be tied high for
   continuous number generation.
   
   The module can be reset with seed set to the same input to generate the 
   exact same sequence of "random" numbers. By setting a different seed on
   a reset you can generate a different set of random numbers.
*/

module random_number_generator #(
    // SEED needs to always be non-zero
    // Since seed is XORed with the 32MSBs of SEED, we need the 96 LSBs to be nonzero.
    SEED = 128h843233523a613966423b622562592c62: SEED.WIDTH == 128 && SEED[95:0] != 0
  )(
    input clk,       // clock
    input rst,       // reset
    input next,      // generate next number flag
    input seed [32], // seed used on reset,
    input stateCode[3],
    output numbers[4][4],  // "random" number output
    output operators[3][2]   // output target[8]
  ) {
  
  .clk(clk) {
    dff x[32], y[32], z[32], w[32]; // state storage
  }
  
  sig t [32];
  sig divisor;
  always {
    // modulo using a - (b * floor(a/b))
    numbers[0] = 2 + w.q[28:26];
    numbers[1] = 2 + w.q[23:21];
    numbers[2] = 2 + w.q[17:15];
    numbers[3] = 2 + w.q[12:10];
    if (stateCode == 0) {
      divisor = 99;
    } else if (stateCode == 1) {
      divisor = 2;
    } else if (stateCode == 2) {
      divisor = 3;
    } else {
      divisor = 4;
    }
    
    operators[0] = w.q[31:30] - (divisor * (w.q[31:30] / divisor));
    operators[1] = w.q[19:18] - (divisor * (w.q[19:18] / divisor));
    operators[2] = w.q[25:24] - (divisor * (w.q[25:24] / divisor));
    t = x.q ^ (x.q << 11);          // calculate intermediate value
    
    if (next) {                     // if we need a new number
      x.d = y.q;                    // shift values along
      y.d = z.q;                   
      z.d = w.q;
      
      // magic formula from Wikipedia
      w.d = w.q ^ (w.q >> 9) ^ t ^ (t >> 8);
    }
    
    // Manually reset the flip-flops so we can change the reset value
    if (rst) {
      x.d = SEED[0+:32];
      y.d = SEED[32+:32];
      z.d = SEED[64+:32];
      w.d = SEED[96+:32] ^ seed;
    }
  }
}