/*
  TODO shift red pins to the left once
*/

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,      // AVR RX buffer full
    input new_Game_Button,
    input easy_Button,
   // output io_led [8],   // LEDs on IO Shield
   // output io_seg [8],      // 7-segment LEDs on IO Shield
   // output io_sel [4],      // Digit select on IO Shield
  //  input io_button [5],    // 5 buttons on IO Shield
  //  input io_dip [3][8],     // DIP switches on IO Shield,
    
/// Red Player IO units/////////////////////////////////////////////////////////
    // keypad
    input keypad_Red_Row[4],
    output keypad_Red_Col[4],
    // 4 digit 7-seg
    output four_seg_Red[8],
    output four_seg_sel_Red[4],
    // 2 digit 7-seg    
    output two_seg_Red[8],
    output two_seg_sel_Red[2]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      gameManager gameManager;
      roundManager roundManager;
      playerManager redPlayer;
      
      
     // playerManager bluePlayer;
     //   multi_LED_digit multi_led;
    }
    
  }
  
  always {
  // declare manager at top
    // if new game, reset everything for 1 cycle
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    //led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    
    gameManager.hardButton = 0;
    gameManager.mediumButton = 0;
    gameManager.easyButton = easy_Button;
    gameManager.newGameButton = new_Game_Button;
    gameManager.singlePlayerButton = 0;
    gameManager.multiplayerButton = 0;
    roundManager.newGameFlag = gameManager.newGameFlag;
    roundManager.difficulty = gameManager.difficulty;
    
    
    // player Red IO
    redPlayer.new_game = 0;
    redPlayer.keypad_row = keypad_Red_Row;
    keypad_Red_Col = redPlayer.keypad_col;
    
    four_seg_Red = redPlayer.four_sev_seg;
    four_seg_sel_Red = redPlayer.four_sev_seg_sel;
    
    two_seg_Red = redPlayer.two_sev_seg;
    two_seg_sel_Red = redPlayer.two_sev_seg_sel;
    redPlayer.choice1 = roundManager.choice1;
    redPlayer.choice2 = roundManager.choice2;
    redPlayer.choice3 = roundManager.choice3;
    redPlayer.choice4 = roundManager.choice4;
    redPlayer.currentValue = roundManager.redOut;
    roundManager.redDigit = redPlayer.digit_out;
    roundManager.redOperator = redPlayer.operator_out;
    
  }
}