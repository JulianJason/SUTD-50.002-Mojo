/*
  TODO check pins
*/

module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    //output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    input singlePlayerButton,
    input multiPlayerButton,
    
/// Red Player IO units/////////////////////////////////////////////////////////
    // keypad
    input keypad_Red_Row[4],
    output keypad_Red_Col[4],
    // 4 digit 7-seg
    output four_seg_Red[8],
    output four_seg_sel_Red[4],
    // 2 digit 7-seg    
    output two_seg_Red[8],
    output two_seg_sel_Red[2],
    /// Green IO units 
    output four_seg_Green[8],
    output four_seg_sel_Green[4],
    output two_seg_Green[8],
    output two_seg_sel_Green[2],
    // BLUE player IO units
    input keypad_Blue_Row[4],
    output keypad_Blue_Col[4],
    //output four_seg_Blue[8],
    //output four_seg_sel_Blue[4],
    output two_seg_Blue[8],
    output two_seg_sel_Blue[2],
    output four_seg_Blue[8],
    output four_seg_sel_Blue[8]
  ) {
  
  sig rst;                  // reset signal
  
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    .rst(rst) {
      gameManager gameManager;
      roundManager roundManager;
      playerManager redPlayer;
      playerManager bluePlayer;
      multi_LED_digit multi_led; // delete later
    }
  }
  binaryToBCD bindec;
  always {
  // declare manager at top
    // if new game, reset everything for 1 cycle
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    gameManager.easyButton = 0;
    gameManager.hardButton = 0;
    gameManager.mediumButton = 0;
    gameManager.multiplayerButton = multiPlayerButton;
    gameManager.singlePlayerButton = singlePlayerButton;
    gameManager.singlePlayerButton = 0;
    gameManager.multiplayerButton = 0;
    roundManager.newGameFlag = gameManager.newGameFlag;
    roundManager.difficulty = gameManager.difficulty;
    
/*-------------------------------------------------------------------    
                       Red player IO
-------------------------------------------------------------------*/
    redPlayer.resetFlag = roundManager.redResetFlag;
    // keypad
    redPlayer.keypad_row = keypad_Red_Row;
    keypad_Red_Col = redPlayer.keypad_col;
    // 4 seg    
    four_seg_Red = redPlayer.four_sev_seg;
    four_seg_sel_Red = redPlayer.four_sev_seg_sel;
    // 4 seg choices
    redPlayer.choice1 = roundManager.choice1;
    redPlayer.choice2 = roundManager.choice2;
    redPlayer.choice3 = roundManager.choice3;
    redPlayer.choice4 = roundManager.choice4;
    // 2 seg
    two_seg_Red = redPlayer.two_sev_seg;
    two_seg_sel_Red = redPlayer.two_sev_seg_sel;
    // 2 seg current value
    redPlayer.currentValue = roundManager.redOut;
    
    roundManager.redDigit = redPlayer.digit_out;
    roundManager.redOperator = redPlayer.operator_out;
    roundManager.redInputFlag = redPlayer.inputFlag;
    

/*-------------------------------------------------------------------    
                       Blue player IO
-------------------------------------------------------------------*/
    
    bluePlayer.resetFlag = roundManager.blueResetFlag;
    // keypad
    bluePlayer.keypad_row = keypad_Blue_Row;
    keypad_Blue_Col = bluePlayer.keypad_col;
    // 4 seg
    four_seg_Blue = bluePlayer.four_sev_seg;
    four_seg_sel_Blue = bluePlayer.four_sev_seg_sel;
    // 2 seg
    two_seg_Blue = bluePlayer.two_sev_seg;   
    two_seg_sel_Blue = bluePlayer.two_sev_seg_sel;
    // 4 seg choices
    bluePlayer.choice1 = roundManager.choice1;
    bluePlayer.choice2 = roundManager.choice2;
    bluePlayer.choice3 = roundManager.choice3;
    bluePlayer.choice4 = roundManager.choice4;
    // bluePlayer.currentValue = roundManager.blueOut[4];
    bluePlayer.currentValue = roundManager.blueOut;
    // blue operator
    roundManager.blueInputFlag = bluePlayer.inputFlag;
    roundManager.blueDigit = bluePlayer.digit_out;
    roundManager.blueOperator = bluePlayer.operator_out;
    
    

/*-------------------------------------------------------------------    
                       Judge
-------------------------------------------------------------------*/
    bindec.binary = roundManager.destinationValue;
    multi_led.digit1 = bindec.digit2;
    multi_led.digit2 = bindec.digit1;
    multi_led.digit3 = bindec.digit0;
    multi_led.digit4 = -1;
    four_seg_Green = multi_led.seg;
    four_seg_sel_Green = ~multi_led.sel;
    two_seg_Green = bluePlayer.two_sev_seg;   
    two_seg_sel_Green = ~bluePlayer.two_sev_seg_sel;
    
  }
}