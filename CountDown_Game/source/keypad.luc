/* COMPLETE DO NOT TOUCH
  
*/

module keypad #(
    ROWS = 4 : ROWS > 0,
    DIV = 20: DIV >= 0
  )(
    input clk,  // clock
    input rst,  // reset
    input keypad_row[4],
    output keypad_col[4],
    output digit_out[4],
    output operator_out[4]
  ) {
  const DIGIT_BITS = $clog2(ROWS);
  
  .clk(clk), .rst(rst) {
    counter ctr (#DIV(DIV), #SIZE(DIGIT_BITS), #TOP(ROWS-1));
    dff digitConfirm[4];
    dff opConfirm[4];
  }
  sig col[4];
  sig row[4];
  sig digit[4];
  sig operator[4];
  always {
  operator_out = 0;
    digit_out = 0;
    keypad_col = 0;
    case (ctr.value) {
      0: keypad_col[3:0] = ~4b1000;
         col = 0;
      1: keypad_col[3:0] = ~4b0100;
         col = 1;
      2: keypad_col[3:0] = ~4b0010;
         col = 2;
      3: keypad_col[3:0] = ~4b0001;
         col = 3;
      default: 
         keypad_col = 4b0;
         col = -1;
    }
    case(keypad_row[3:0]) {
      4b1110: row = 0;
      4b1101: row = 1;
      4b1011: row = 2;
      4b0111: row = 3;
      default: row = -1;
    }
    
    
    case (col) {
      0: case(row) {
          0: digit = 0;
             operator = 1;
          1: digit = 0;
             operator = 2;
          2: digit = 0;
             operator = 3;
          3: digit = 0;
             operator = 4;
          default: digit = 0;
                   operator = 0;
        }
      1: case(row) {
          0: digit = 3;
             operator = 0;
          1: digit = 6;
             operator = 0;
          2: digit = 9;
             operator = 0;
          3: digit = 0;
             operator = 5;
          default: digit = 0;
                   operator = 0;
        }
      2: case(row) {
          0: digit = 2;
             operator = 0;
          1: digit = 5;
             operator = 0;
          2: digit = 8;
             operator = 0;
          3: digit = 0;
             operator = 0;
          default: digit = 0;
                   operator = 0;
        }
      3: case(row) {
          0: digit = 1;
             operator = 0;
          1: digit = 4;
             operator = 0;
          2: digit = 7;
             operator = 0;
          3: digit = -1;
             operator = 6;
          default: digit = 0;
                     operator = 0;
          }
        default: digit = 0;
                operator = 0;
    }
    if (digit != digitConfirm.q) {
      digitConfirm.d = digit;
    } else {
      digit_out = digit;
    }
    
    if (operator != opConfirm.q) {
      opConfirm.d = operator;
    } else {
      operator_out = operator;
    }
  }
}
