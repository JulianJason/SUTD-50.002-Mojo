/* COMPLETE DO NOT TOUCH
  
*/

module keypad #(
    ROWS = 4 : ROWS > 0,
    DIV = 18: DIV >= 0 // timing issues with <17 div
  )(
    input clk,  // clock
    input rst,  // reset
    input keypad_row[4],
    output keypad_col[4],
    output io_led2[4],
    output digit_out[4],
    output operator_out[4]
  ) {
  const DIGIT_BITS = $clog2(ROWS);
  
  .clk(clk), .rst(rst) {
    counter ctr (#DIV(DIV), #SIZE(DIGIT_BITS), #TOP(ROWS-1));
    keypad_decoder decoder;    
  }
  sig col[4];
  sig row[4];
  always {
    keypad_col = 0;
    io_led2 = 0;
    case (ctr.value) {
      0: keypad_col[3:0] = ~4b1000;
         col = 0;
      1: keypad_col[3:0] = ~4b0100;
         col = 1;
      2: keypad_col[3:0] = ~4b0010;
         col = 2;
      3: keypad_col[3:0] = ~4b0001;
         col = 3;
      default: 
         keypad_col = 4b0;
         col = -1;
    }
    case(keypad_row[3:0]) {
      4b1110: row = 0;
      4b1101: row = 1;
      4b1011: row = 2;
      4b0111: row = 3;
      default: row = -1;
    }
    decoder.col = col;
    decoder.row = row;
    digit_out = decoder.digit_out;
    operator_out = decoder.operator_out;
  }
}