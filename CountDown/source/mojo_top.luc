module mojo_top (
    input clk,              // 50MHz clock
    input rst_n,            // reset button (active low)
    output led [8],         // 8 user controllable LEDs
    input cclk,             // configuration clock, AVR ready when high
    output spi_miso,        // AVR SPI MISO
    input spi_ss,           // AVR SPI Slave Select
    input spi_mosi,         // AVR SPI MOSI
    input spi_sck,          // AVR SPI Clock
    output spi_channel [4], // AVR general purpose pins (used by default to select ADC channel)
    input avr_tx,           // AVR TX (FPGA RX)
    output avr_rx,          // AVR RX (FPGA TX)
    input avr_rx_busy,       // AVR RX buffer full,
    input newGameButton,
    input easyButton,
    output four_seg_red[8],
    output four_seg_sel_red[4],
    output keypad_blue_col[4],
    input keypad_blue_row[4]
  ) {
  
  sig rst;                  // reset signal
  sig difficulty;
  .clk(clk) {
    // The reset conditioner is used to synchronize the reset signal to the FPGA
    // clock. This ensures the entire FPGA comes out of reset at the same time.
    reset_conditioner reset_cond;
    edge_detector ed_new (#RISE(1), #FALL(0));
    edge_detector ed_easy (#RISE(1), #FALL(0));
    fsm state = {IDLE, EASY, MEDIUM, HARD};
     .rst(rst) {
      keypad testKeypad;  
      multi_LED_digit red4Led;
      roundManager manager
    }
    dff redScore[4];
    dff blueScore[4];
    aluUnit alu;
  }
  
  always {
  
    reset_cond.in = ~rst_n; // input raw inverted reset signal
    rst = reset_cond.out;   // conditioned reset
    
    led = 8h00;             // turn LEDs off
    spi_miso = bz;          // not using SPI
    spi_channel = bzzzz;    // not using flags
    avr_rx = bz;            // not using serial port
    ed_new.in = newGameButton;
    ed_easy.in = easyButton;
    
    testKeypad.keypad_row = keypad_blue_row;
    keypad_blue_col = testKeypad.keypad_col;
    alu.a = 4;
    alu.b = 6;
    alu.alufn = 6b000000;
    red4Led.digits[0] = testKeypad.digit_out;
    red4Led.digits[1] = testKeypad.digit_out;
    red4Led.digits[2] = alu.result;
    red4Led.digits[3] = testKeypad.operator_out;
    four_seg_red = red4Led.seg;
    four_seg_sel_red = red4Led.sel;
    
    
    case (state.q) {
      state.IDLE:
        if (ed_easy.out) {
          state.d = state.EASY;
        }
      state.EASY:
        difficulty = 2b01;
        
        if (manager.redWins == 1) {
          redScore.d = redScore.q + 1;
        } else if (manager.blueWins == 1) {
          blueScore.d = blueScore.q + 1;
        }
        
        if (ed_new.out) {
          state.d = state.IDLE;
        }
        
      state.MEDIUM:
        difficulty = 2b10;
        if (ed_new.out) {
          state.d = state.IDLE;
        }
      state.HARD:
        difficulty = 2b11;
        if (ed_new.out) {
          state.d = state.IDLE;
        }
    }
  }
}